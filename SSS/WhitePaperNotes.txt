INTEL EXTENSION BASICS:

You must enable the intel extensions within the application, and also within
your shader (pixel).  These functions are easy to find inside of the intel
extension C++ and .hlsl files.  These files must be included in the directory
of your project, OR keep them in a central location on your system.  So long
as you know the path to the intel extension helper files, you can access them.

Further, Iris orders pixels in the order of SV_PRIMITIVEID. This primitive ID
is given to each primitive, and they are arranged in depth-order. As the pixel
shader executes, it executes in primitive-order. However, this does not
decessarily guarantee ordered access to shared information. This is where the
pixel ordering comes into play. Once a critical section of the code is hit, we
begin our pixel ordering.  Once this barrier is hit, the pixels in-flight are
arranged by primitive ID, then executed in-order.  This means that depth-
testing can be combined into one pass.


TO MAKE SURE ALL FRAGMENTS ARE RENDERED:

We need to disable culling, (CULL_NONE) and also make sure the depth stensil
tests approve render of all sides.



EFFECT (.fx) FILES:

In this design, I think it would be best to put everything into an effect
file.  That way, I can keep all of my Pixel Sync effects in one, readable
file.  This will make the C++ application more  readable, as well.  For more
information about effect files, take a look at p. 289 of Beginning DirectX 11
Game Programming 1st Edition, by Allen Sherrod and Wendy Jones.  Info on
effect files can also be found on the microsoft developer's website.

Inside of these effect files, it is possible to define a multiple pass
rendering technique, that way all the application has to do is specify which
technique it wishes to use.  This will be a good way to demonstrate, in real
time, certain rendering techniques sans Iris Extensions against the same
techniques using IrisExtensions.  For ease of programming, I will include a
readme file that contains information on what key presses will do what.
Clickable menus if time permits.


UAV Usage:

- Cannot just be defined within the shaders.  Must use application side to set
the UAV for pixel-ordering access. We must create and set the size, prior to
usage inside of our pixel shaders.

How to create a UAV:

We first create a texture, that will act as a "render target."  At first
glance, this looks to be sort of a bogus object created without reason.
However, within our pixel shader, we need some sort of empty texture with
which the pixel shaders can refer to and interact with.  So, what we will need
is some sort of a UAV, in this case, a 2D texture of UINTs.  For the "pulse
check" part of this project, I just use some UINTS to determine whether a
pixel has been touched by a previous fragments. Now, on to the step-by-step to
creating a UAV:

- Create a D3D11_TEXTURE2D object.  Make it global.

- See the code to see what we assign each value to the texture description.

- The bind flags need to show that the texture is an Unordered Access shader
resource, and we need to disguise it as a render target, that way we have a
way to initialize the sive of our RWTexture2D inside of our shader.

- Create the texture with a NULL argument for the pData argument.  For a RW
texture, this is necessary, since the standard dictates the intial values must
be zero.

To see how I initialized and created the texture, run a search of the keyword
"texDesc" on the DXApp.cpp file.  This will show you what you need to know.

- After that, we go on to creating the actual UAV.  The UAV pointer on the
application side should, again, be global.  

TODO FOR THIS WEEK (HARD DEADLINE FOR FRIDAY AFTERNOON, 5 PM):

- File Obj. Reader.

- Include a couple of simple .obj files (Cube, Sphere, rabbit, buddha,
  [maybe]Luck Dragon)

- Try your hand at creating your own .fx file.



